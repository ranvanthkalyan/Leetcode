1.) Relative Ranks
from collections import defaultdict
def findRelativeRanks(score):
    d=defaultdict(int)
    place=["Gold Medal","Silver Medal","Bronze Medal"]
    n=len(score)
    a=[" "]*n
    for i in range(n): d[score[i]]=i
    score.sort(reverse=True)
    for i in range(n):
        if i<3:
            a[d[score[i]]]=place[i]
        else:
            a[d[score[i]]]=str(i+1)
    return a
score=[5,4,3,2,1]
print(findRelativeRanks(score))



2.)Array Partition
def arrayPairSum(nums):
    nums.sort()
    count=0
    for i in range(0,len(nums),2):
        count+=nums[i]
    return count
nums=[1,4,3,2]
print(arrayPairSum(nums))



3.)Longest Harmonious Subsequence
def findLHS(nums):
    num_counts={}
    for num in nums:
        num_counts[num]=num_counts.get(num,0)+1
    max_length=0
    for num in num_counts:
        if num+1 in num_counts:
            max_length=max(max_length,num_counts[num]+num_counts[num+1])
    return max_length
nums=[1,3,2,2,5,2,3,7]
print(findLHS(nums))



4.)Fair Candy Swap
def fairCandySwap(aliceSizes, bobSizes):
    toatlAlice=sum(aliceSizes)
    totalBob=sum(bobSizes)
    targetTotal=(totalAlice+totalBob)//2
    for aliceCandy in aliceSizes:
        bobCandy=aliceCandy+(targetTotal-totalAlice)
        if bobCandy in bobSizes:
            return [aliceCandy,bobCandy]
aliceSizes=[1,1]
bobSizes=[2,2]
print(fairCandySwap(aliceSizes, bobSizes))



5.)Sort Array by Parity
def sortArrayByParity(nums):
    left,right=0,len(nums)-1
    while left<right:
        while left<right and nums[left]%2==0:
            left+=1
        while left<right and nums[right]%2==0:
            right-=1
        nums[left],nums[right]=nums[right],nums[left]
    return nums



6.)Matrix Cells in Distance Order
class Solution:
    def allCellsDistOrder(self, rows: int, cols: int, rCenter: int, cCenter: int) -> List[List[int]]:
        return sorted([[r,c] for r in range(rows) for c in range(cols)], key=lambda point: abs(point[0] - rCenter) + abs(point[1] - cCenter))



7.)Two City Scheduling
class Solution(object):
    def twoCitySchedCost(self, costs):
        a = sorted(costs, key=lambda x: x[0]-x[1])
        Sa = 0
        Sb = 0
        for i in range(len(a)//2):
            Sa += a[i][0]
        for i in range(len(a)//2, len(a)):
            Sb += a[i][1]
        return Sa + Sb



8.)Merge Sorted Array
class Solution:
    def merge(self,nums1:List[int], m:int, nums2:List[int], n:int) ->None:
        cnt1=0
        cnt2=0
        cnt=0
        while cnt1<m and cnt2<n:
            if nums1[cnt]>nums2[cnt2]:
                for i in range(m+n-1,cnt,-1):
                    nums1[i]=nums1[i-1]
                nums1[cnt]=nums2[cnt2]
                cnt2+=1
                cnt+=1
            else:
                cnt1+=1
                cnt+=1
        while cnt2<n:
            for i in range(m+n-1,cnt,-1):
                nums1[i]=nums1[i-1]
            nums1[cnt]=nums2[cnt2]
            cnt2+=1
            cnt+=1



9.)Insertion Sort List
class Solution:
    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        back = head 
        front = head.next 
        stop = 0
        while front:
            if back.val > front.val:
                back.val, front.val = front.val, back.val 
            back = back.next 
            front = front.next 
            stop += 1
        for _ in range(stop): 
            back = head 
            front = head.next 
            while front:
                if back.val > front.val:
                    back.val, front.val = front.val, back.val 
                back = back.next 
                front = front.next
        return head



10.)Kth Smallest Element in a Sorted Matrix
import numpy as np
class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        mat=np.array(matrix).flatten()
        mat.sort()
        return mat[k-1]